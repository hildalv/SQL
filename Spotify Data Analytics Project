# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#1. What is the average danceability by track and artist?
SELECT artist_name,track_name,danceability
FROM BIT_DB.Spotifydata
GROUP BY danceability
ORDER BY AVG (danceability)

#2. Who are the top 10 artists based on popularity? 
SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc 
limit 10;

#3. What artist released the longest song?
SELECT artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY duration_ms desc 
limit 1;

#4. Whats the average danceability for the 10 most popular songs? 
SELECT track_name,danceability
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity AND AVG (danceability) desc
limit 10;

#5. What artist released the shortest song?
SELECT 
artist_name
,duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms ASC
LIMIT 1;

#6. Who is the artist with less popularity? 
SELECT 
artist_name
,popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity ASC
LIMIT 1;

#7. Which song has the highest energy? 
SELECT 
track_name 
,energy
FROM BIT_DB.Spotifydata
ORDER BY energy DESC
LIMIT 1;

#8. Who is the artist with the most popularity? 
SELECT 
artist_name
,popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 3;
